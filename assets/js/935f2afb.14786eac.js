"use strict";(self.webpackChunksignal_utils_nx=self.webpackChunksignal_utils_nx||[]).push([[53],{2140:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started","href":"/signal-utils/docs/getting-started","docId":"getting-started"},{"type":"category","label":"Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"bufferCount","href":"/signal-utils/docs/operators/buffer-count","docId":"operators/buffer-count"},{"type":"link","label":"debounceTime","href":"/signal-utils/docs/operators/debounce-time","docId":"operators/debounce-time"},{"type":"link","label":"delay","href":"/signal-utils/docs/operators/delay","docId":"operators/delay"},{"type":"link","label":"filter","href":"/signal-utils/docs/operators/filter","docId":"operators/filter"},{"type":"link","label":"map","href":"/signal-utils/docs/operators/map","docId":"operators/map"},{"type":"link","label":"throttleTime","href":"/signal-utils/docs/operators/throttle-time","docId":"operators/throttle-time"}],"href":"/signal-utils/docs/category/operators"},{"type":"category","label":"Signal Creators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"interval","href":"/signal-utils/docs/signals/interval","docId":"signals/interval"}],"href":"/signal-utils/docs/category/signal-creators"}]},"docs":{"getting-started":{"id":"getting-started","title":"Getting Started","description":"Welcome to the documentation for Signal Utils! This guide will help you get started with using the library to work with signals in your Angular applications.","sidebar":"tutorialSidebar"},"operators/buffer-count":{"id":"operators/buffer-count","title":"bufferCount","description":"bufferCount operator collects a specified number of consecutive values from the source signal and emits them as an array. This can be particularly useful when you want to group signal emits into fixed-size arrays for processing or presentation.","sidebar":"tutorialSidebar"},"operators/debounce-time":{"id":"operators/debounce-time","title":"debounceTime","description":"debounceTime operator delays the emission of signal until a specified amount of time has passed since the last emit.","sidebar":"tutorialSidebar"},"operators/delay":{"id":"operators/delay","title":"delay","description":"delay operator introduces a specified delay between the emission of signals from the source. It delays the emission of each value by a defined duration, allowing you to control the timing of when values are processed downstream.","sidebar":"tutorialSidebar"},"operators/filter":{"id":"operators/filter","title":"filter","description":"filter operator filters values emitted by the source based on a provided predicate function.","sidebar":"tutorialSidebar"},"operators/map":{"id":"operators/map","title":"map","description":"map is an operator that let you transform the values emitted by the source signal. It takes each value, applies a provided function to it, and emits the result as a new value in the target signal.","sidebar":"tutorialSidebar"},"operators/throttle-time":{"id":"operators/throttle-time","title":"throttleTime","description":"throttleTime operator limits the emission of values from the source signal based on a time window. It emits the first value in the window and then ignores subsequent values until the window expires.","sidebar":"tutorialSidebar"},"signals/interval":{"id":"signals/interval","title":"interval","description":"interval function generates a read-only signal that emits values at a regular interval. This is useful for scenarios where you want to receive updates or triggers periodically.","sidebar":"tutorialSidebar"}}}')}}]);