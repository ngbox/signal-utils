"use strict";(self.webpackChunksignal_utils_nx=self.webpackChunksignal_utils_nx||[]).push([[53],{2140:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Getting Started","href":"/signal-utils/getting-started","docId":"getting-started"},{"type":"category","label":"Operators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"bufferCount","href":"/signal-utils/operators/bufferCount","docId":"operators/bufferCount"},{"type":"link","label":"debounceTime","href":"/signal-utils/operators/debounceTime","docId":"operators/debounceTime"},{"type":"link","label":"delay","href":"/signal-utils/operators/delay","docId":"operators/delay"},{"type":"link","label":"filter","href":"/signal-utils/operators/filter","docId":"operators/filter"},{"type":"link","label":"map","href":"/signal-utils/operators/map","docId":"operators/map"},{"type":"link","label":"throttleTime","href":"/signal-utils/operators/throttleTime","docId":"operators/throttleTime"}],"href":"/signal-utils/category/operators"},{"type":"category","label":"Signal Creators","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"fromAsync","href":"/signal-utils/signal-creators/fromAsync","docId":"signal-creators/fromAsync"},{"type":"link","label":"createInterval","href":"/signal-utils/signal-creators/create-interval","docId":"signal-creators/create-interval"}],"href":"/signal-utils/category/signal-creators"}]},"docs":{"getting-started":{"id":"getting-started","title":"Getting Started","description":"Welcome to the documentation for Signal Utils! This guide will help you get started with using the library to work with signals in your Angular applications.","sidebar":"tutorialSidebar"},"operators/bufferCount":{"id":"operators/bufferCount","title":"bufferCount","description":"bufferCount operator collects a specified number of consecutive values from the source signal and emits them as an array. This can be particularly useful when you want to group signal emits into fixed-size arrays for processing or presentation.","sidebar":"tutorialSidebar"},"operators/debounceTime":{"id":"operators/debounceTime","title":"debounceTime","description":"debounceTime operator delays the emission of signal until a specified amount of time has passed since the last emit.","sidebar":"tutorialSidebar"},"operators/delay":{"id":"operators/delay","title":"delay","description":"delay operator introduces a specified delay between the emission of signals from the source. It delays the emission of each value by a defined duration, allowing you to control the timing of when values are processed downstream.","sidebar":"tutorialSidebar"},"operators/filter":{"id":"operators/filter","title":"filter","description":"filter operator filters values emitted by the source based on a provided predicate function.","sidebar":"tutorialSidebar"},"operators/map":{"id":"operators/map","title":"map","description":"map is an operator that let you transform the values emitted by the source signal. It takes each value, applies a provided function to it, and emits the result as a new value in the target signal.","sidebar":"tutorialSidebar"},"operators/throttleTime":{"id":"operators/throttleTime","title":"throttleTime","description":"throttleTime operator limits the emission of values from the source signal based on a time window. It emits the first value in the window and then ignores subsequent values until the window expires.","sidebar":"tutorialSidebar"},"signal-creators/create-interval":{"id":"signal-creators/create-interval","title":"createInterval","description":"createInterval function generates a read-only signal that emits values at a regular interval. This is useful for scenarios where you want to receive updates or triggers periodically.","sidebar":"tutorialSidebar"},"signal-creators/fromAsync":{"id":"signal-creators/fromAsync","title":"fromAsync","description":"fromAsync is a utility function designed to simplify asynchronous data handling when working with Angular signals using observables. It takes an observable as input and returns an object containing signals for loading, data, and error states along with a \\"refresh\\" function.","sidebar":"tutorialSidebar"}}}')}}]);